from collections import deque

class State:
    def __init__(self, m, c, b):
        self.m = m # number of missionaries on the initial bank
        self.c = c # number of cannibals on the initial bank
        self.b = b # 1 if the boat is on the initial bank, 0 otherwise

    def __repr__(self):
        return f"({self.m}, {self.c}, {self.b})"

    def __eq__(self, other):
        return self.m == other.m and self.c == other.c and self.b == other.b

    def is_valid(self):
        if self.m < 0 or self.m > 3 or self.c < 0 or self.c > 3:
            return False
        if self.m > 0 and self.m < self.c:
            return False
        if 3 - self.m > 0 and 3 - self.m < 3 - self.c:
            return False
        return True

    def is_goal(self):
        return self.m == 0 and self.c == 0 and self.b == 0

    def get_neighbors(self):
        neighbors = []
        if self.b == 1:
            for m in range(3):
                for c in range(3):
                    new_state = State(self.m - m, self.c - c, 0)
                    if new_state.is_valid():
                        neighbors.append(new_state)
        else:
            for m in range(3):
                for c in range(3):
                    new_state = State(self.m + m, self.c + c, 1)
                    if new_state.is_valid():
                        neighbors.append(new_state)
        return neighbors

def bfs():
    start_state = State(3, 3, 1)
    queue = deque([([], start_state)])

    while queue:
        path, current_state = queue.popleft()
        if current_state.is_goal():
            return path + [current_state]
        for neighbor in current_state.get_neighbors():
            if neighbor not in path:
                queue.append((path + [current_state], neighbor))
    return None

def print_solution(path):
    for i, state in enumerate(path):
        print(f"Step {i}: {state}")

if __name__ == "__main__":
    solution = bfs()
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution found.")
