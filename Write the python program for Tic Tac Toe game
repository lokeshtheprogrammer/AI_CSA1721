def print_board(board):
    for row in board:
        print(" " + " | ".join(row))
        print("---+---+---")

def check_win(board, player):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]],
    ]
    return [player, player, player] in win_conditions

def check_tie(board):
    for row in board:
        if " " in row:
            return False
    return True

def get_move(player, board):
    while True:
        try:
            row = int(input(f"Player {player}, enter your row (1-3): ")) - 1
            col = int(input(f"Player {player}, enter your column (1-3): ")) - 1
            if row not in range(3) or col not in range(3):
                print("Invalid move. Please enter a number between 1 and 3.")
            elif board[row][col] != " ":
                print("This cell is already taken. Choose another one.")
            else:
                return row, col
        except ValueError:
            print("Invalid input. Please enter a number.")

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    current_player = 0

    while True:
        print_board(board)
        row, col = get_move(players[current_player], board)
        board[row][col] = players[current_player]

        if check_win(board, players[current_player]):
            print_board(board)
            print(f"Player {players[current_player]} wins!")
            break
        if check_tie(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = 1 - current_player  # Switch players

if __name__ == "__main__":
    play_game()
