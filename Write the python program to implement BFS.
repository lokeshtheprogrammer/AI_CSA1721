from collections import deque

def bfs(graph, start_node):
    # Initialize a queue for BFS
    queue = deque([start_node])
    # Set to keep track of visited nodes to avoid revisiting them
    visited = set([start_node])

    while queue:
        # Dequeue a vertex from queue
        current_node = queue.popleft()
        print(current_node, end=" ")

        # Get all adjacent vertices of the dequeued vertex. If an adjacent has not been visited,
        # mark it visited and enqueue it
        for neighbour in graph[current_node]:
            if neighbour not in visited:
                queue.append(neighbour)
                visited.add(neighbour)

# Example usage
if __name__ == "__main__":
    # Example graph represented as an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
    
    print("BFS traversal starting from node 'A':")
    bfs(graph, 'A')
