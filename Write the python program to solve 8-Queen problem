def is_safe(board, row, col):
    """
    Check if it's safe to place a queen at board[row][col].
    This function checks if there's a queen in the same column or diagonal.
    """
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def print_board(board):
    """
    Print the chessboard with queens placed.
    """
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    print("\n")

def solve_queens(board, row):
    """
    Solve the N Queen problem using backtracking.
    It places queens one by one in different rows.
    """
    n = len(board)
    if row >= n:
        print_board(board)
        return True
    
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens(board, row + 1):
                return True
            # If placing queen in board[row][col]
            # doesn't lead to a solution, then
            # remove queen from board[row][col]
            board[row] = -1  # Backtrack
    
    # If the queen cannot be placed in any row in
    # this column col then return false
    return False

def solve_n_queens(n):
    """
    Solves the N Queen problem and prints the solution
    """
    board = [-1] * n
    if not solve_queens(board, 0):
        print("Solution does not exist")
    else:
        print("Solution found:")

if __name__ == "__main__":
    n = 8  # Number of queens
    solve_n_queens(n)
